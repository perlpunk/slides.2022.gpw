---
title: News from the YAML World
content: |
  [title][/title]
  [list]
  [*]Where: German Perl/Raku Workshop (Leipzig & virtual)
  [*]When: March 30 - April 1 2022
  [*]Who: Tina MÃ¼ller
  [/list]

---
title: About me
content: |
  [title][/title]
  [list animation="1,appear"]
  [*]Addicted to Perl since 1998
  [*]Addicted to YAML since 2017
  [*]Engineer at SUSE Software Solutions [img=suse_logo_small.png]SUSE[/img] since 2019
  [*]"YAML Consultant"
  [*]Maintaining the YAML Test Suite, YAML Test Matrix,
     YAML.pm, YAML::XS, PyYAML, libyaml, and YAML::PP
  [/list]


# New YAML libaries


# Refparser
# YAML::PP::Ref

---
title: Topics
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Introduction
  [*]YAML Spec
  [*]YAML Test Suite
  [*]YAML Libraries
  [*]Reference Parser
  [*]YAML::PP
  [*]YAML::Tidy
  [/list]

---
title: YAML
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Invented 2001
  [*]By Oren Ben-Kiki, Clark Evans, Ingy dÃ¶t Net
  [*]Ingy says Hi ðŸ˜Š
  [/list]

---
title: YAML
content: |
  [title][/title]
  [size=120]
  [br]
  [span animation="1,appear"]Yet[/span]
  [span animation="2,appear"]Another[/span]
  [span animation="3,appear"]^W[/span]
  [span animation="4,appear"]^W[/span]
  [/size]

---
title: YAML
content: |
  [title][/title]
  [size=120]
  [br]
  [span animation="1,appear"]YAML[/span]
  [span animation="2,appear"]Ain't[/span]
  [span animation="3,appear"]Markup[/span]
  [span animation="4,appear"]Language[/span]
  [/size]

---
title: Introduction
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*][url=http://yaml.org/]YAML[/url] is a data serialization language
  [*]Superset of JSON
  [*]Block style and Flow style
  [*]Many ways to write a string
  [*]Aliases (like References or Pointers)
  [*]Comments
  [*]Allowed comma after the last item!
  [*]Multiple documents in one file or stream
  [*]Powerful tags for loading objects or customized data/callbacks
  [*][url=https://www.yaml.info/]Learn more on www.yaml.info[/url]
  [/list]

---
title: History
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]YAML 1.1 was implemented by PyYAML and libyaml (with some divergence to the spec)
  [*]Many other libraries ported this or use libyaml as a binding
  [*]YAML 1.2 was not widely adopted for a long while
  [*]There hadn't been a test suite until 2016
  [*][url=https://perlpunk.github.io/yaml-test-schema/schemas.html]Schema differences[/url]
  [/list]

---
title: YAML 1.1 Fun - Norway
content: |
  [title][/title]
  [img=home-assistant-yaml-norway.png]Norway[/img]
---
title: YAML 1.1 Fun - Ontario
content: |
  [title][/title]
  [img=home-assistant-yaml-ontario.png]Ontario[/img]

---
title: Perl
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]In Perl, most of the modules don't load NO or ON as booleans (except YAML::Syck)
  [*]But all modules except YAML::PP don't implement 1.1 or 1.2 correctly:
  [*][url=https://perlpunk.github.io/YAML-PP-p5/schema-examples.html]YAML Schema Examples[/url]
  [/list]
---
title: YAML Spec
content: |
  [br][br][br][br][br][br][br]
  [size=80][b]YAML Specification[/b][/size]

---
title: YAML Spec
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]New revision [url=https://yaml.org/spec/1.2.2/]1.2.2[/url] released 2021-10-01
  [*]Lots of clarifications and errata fixes
  [*][url=https://yaml.org/spec/1.2.2/ext/changes]Changelog[/url] between the versions
  [*]Source is now maintainable and in a modern format
  [*][url=https://ietf-wg-httpapi.github.io/mediatypes/ioggstream-29/draft-ietf-httpapi-yaml-mediatypes.html]application/yaml[/url] mediatype RFC
  [/list]

---
title: YAML Test Suite
content: |
  [br][br][br][br][br][br][br]
  [size=80][b]YAML Test Suite[/b][/size]

---
title: YAML Test Suite
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*][url=https://github.com/yaml/yaml-test-suite]YAML Test Suite[/url]
  [*]Latest release in January
  [*]Over 400 tests
  [*]11 libraries in 10 programming languages are using it
  [*]...or more that we don't know yet :)
  [*][url=https://matrix.yaml.info/]YAML Test Matrix[/url]
  [/list]

---
title: Play with YAML
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*][url=https://github.com/yaml/yaml-runtimes]YAML Runtimes[/url] images
  [*]Small images seperated by runtime/language, e.g. static, node, perl, ...
  [*]26 different libraries
  [*][url=https://play.yaml.io/main/parser]YAML Playground[/url] in the Browser,
    using Docker in the background
  [/list]

---
title: YAML Libraries
content: |
  [br][br][br][br][br][br][br]
  [size=80][b]YAML Libraries[/b][/size]

---
title: YAML Libraries
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]New YAML libraries are popping up
  [*]Maintainers of existing libraries are changing
  [*]Many of them get aware of the Test Suite
  [/list]

---
title: C libfyaml
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*][url=https://github.com/pantoniou/libfyaml]libfyaml[/url], written by Pantelis
  Antoniou, very active and part of the YAML Core Team [*]Alternative to libyaml
  [*]Practically passes all tests
  [*]Highly recommended to try it out
  [*]Worth trying to write a perl binding
  [/list]

---
title: Javascript yaml
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*][url=https://github.com/eemeli/yaml]yaml[/url] written by Eemeli Aro
  [*]Start in 2018, it is a feature rich library passing most tests
  [*]It can roundtrip comments
  [*]It supports both YAML 1.1 and YAML 1.2
  [*]It supports custom tags
  [*]Offers lots of [url=https://eemeli.org/yaml/]Examples[/url]
  [*]Try it out!
  [/list]

---
title: Other libraries
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Other libraries that are new or are starting to be maintained again:
  [*][url=https://github.com/aaubry/YamlDotNet]YamlDotNet[/url]
  [*][url=https://github.com/biojppm/rapidyaml]C++ rapidyaml[/url]
  [*][url=https://github.com/chyh1990/yaml-rust]yaml-rust[/url]
  [*][url=https://github.com/neslib/Neslib.Yaml]Delphi Neslib.Yaml[/url]
  [/list]

---
title: YAML Reference Parsers
content: |
  [br][br][br][br][br][br][br]
  [size=80][b]YAML Reference Parser[/b][/size]

---
title: The YAML Grammar as HTML
content: |
  [title][/title]
  [img=yaml-spec-html.png]Grammar[/img]

---
title: The YAML Grammar as YAML
content: |
  [title][/title]
  [codeboxsmall]:026: b-char
  # b-char ::=
  #   b-line-feed | b-carriage-return

  b-char:
    (any):
    - b-line-feed
    - b-carriage-return



  #===============================================================================
  # The (---) operator here matches if the next character is in the first range,
  # but not in any of the following ranges.
  #===============================================================================

  :027: nb-char
  # nb-char ::=
  #   c-printable - b-char - c-byte-order-mark

  nb-char:
    (---):
    - c-printable
    - b-char
    - c-byte-order-mark[/codeboxsmall]

---
title: The YAML Grammar as Code
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Ingy parsed the HTML and generated
  [url=https://github.com/yaml/yaml-grammar/blob/master/yaml-spec-1.2.yaml]YAML[/url]
  [*]Then he used the YAML to generate [url=https://github.com/yaml/yaml-reference-parser]YAML Reference Parsers[/url]
  [*]And one of the Reference Parsers is Perl!
  [/list]

---
title: Yaml Reference Parser in Perl
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Passes all tests (well, that's what we expect, right?)
  [*]The module is on CPAN: [url=https://metacpan.org/dist/YAML-Parser]YAML::Parser[/url]
  [*]For loading into a data structure you can plug it into YAML::PP, which I did with
  [url=https://metacpan.org/dist/YAML-PP-Ref]YAML::PP::Ref[/url]
  [*]Try it out!
  [*]Not good enough for production right now as it is comparably slow,
  and the error messages are not user friendly yet
  [/list]

---
title: YAML::PP
content: |
  [br][br][br][br][br][br][br]
  [size=80][b]YAML::PP[/b][/size]

---
title: YAML::PP changes since 2020
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Passing more test cases now
  [*]Leftover cases should be really really rare, but I want to fix them eventually
  [*]Duplicate mapping keys are now fatal
  [*]Utility scripts yamlpp-* got new options, e.g. --merge, --include, --perl
  [*]Typeglobs can be loaded and dumped
  [*]Some Emitter fixes, but there is still a lot to do regarding a nice looking output
  [*]YAML::PP::Highlight colorizes hash keys
  [/list]


---
title: YAML::PP::Preserve
content: |
  [title][/title]
  [codeboxsmall]# Without preserving
  % echo '---
  ref: &alias
    - 23
    - 24
  z: [a, "b", c]
  y: 2
  x: *alias
  literal: |
    line 1
    line 2
  ' | yamlpp-load-dump -P0
  ---
  literal: |
    line 1
    line 2
  ref: &1
  - 23
  - 24
  x: *1
  y: 2
  z:
  - a
  - b
  - c[/codeboxsmall]
  [codeboxsmall animation=1,appear]Preserving order, alias names, quoting, flow style
  % echo '---
  ref: &alias
    - 23
    - 24
  z: [a, "b", c]
  y: 2
  x: *alias
  literal: |
    line 1
    line 2
  ' | yamlpp-load-dump
  ---
  ref: &alias
  - 23
  - 24
  z: [a, "b", c]
  y: 2
  x: *alias
  literal: |
    line 1
    line 2



  [/codeboxsmall]

---
title: YAML::PP::Preserve
content: |
  [title][/title]
  You can also create preserved nodes from scratch:
  [codebox]
  use YAML::PP;
  use YAML::PP::Common qw/ :PRESERVE :STYLES /;

  my $yp = YAML::PP->new( preserve => PRESERVE_ORDER PRESERVE_SCALAR_STYLE PRESERVE_FLOW_STYLE );

  my $hash = $yp->preserved_mapping({}, style => YAML_FLOW_MAPPING_STYLE);
  %$hash = (z => 1, a => 2, y => 3, b => 4);

  $hash->{doublequotes} = $yp->preserved_scalar(
    "lala", style => YAML_DOUBLE_QUOTED_SCALAR_STYLE
  );

  say $yp->dump_string($hash);
  __END__
  --- {z: 1, a: 2, y: 3, b: 4, doublequotes: "lala"}
  [/codebox]

---
title: YAML::PP::Highlight
content: |
  [title][/title]
  [codebox animation="1,appear"][include="example.yaml.html"][/codebox]

---
title: YAML::PP::LibYAML
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*][url=https://metacpan.org/pod/YAML::PP::LibYAML]YAML::PP::LibYAML[/url] uses libyaml as the parser/emitter backend
  [*]and YAML::PP as the loader/dumper frontent
  [*]I don't know of any production uses yet
  [*]If you need YAML:PP plus a better performance, try it out
  [/list]

---
title: YAML::Tidy
content: |
  [br][br][br][br][br][br][br]
  [size=80][b]YAML::Tidy[/b][/size]

---
title: YAML::Tidy
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Inspired by perltidy and yamllint
  [*]I think I said at the GPW 2020 that I want to write [url=https://github.com/perlpunk/yamltidy]yamltidy[/url]
  [*]I did in fact, but it only has two features so far
  [*]It removes trailing whitespace
  [*]It indents all input to the same amount of spaces (configurable)
  [*]It doesn't remove any other formatting or comments
  [*]It uses libyaml for getting the parser events line and column numbers
  [*]Can be configured by a YAML file (of course)
  [/list]

---
title: YAML::Tidy
content: |
  [title][/title]
  [codebox]% cat in.yaml
  ---
  a:
      b:
          c: d
  [/codebox]
  [codebox animation=1,appear]% yamltidy in.yaml
  ---
  a:
    b:
      c: d
  [/codebox]

---
title: YAML::Tidy
content: |
  [title][/title]
  [list animation="1,greyin"]
  [*]Supports inplace editing with --inplace
  [*]You can use --partial to tell yamltidy that it should not change the toplevel indent
  [*]This is useful for editor plugins
  [/list]

---
title: YAML::Tidy .vimrc
content: |
  [title][/title]
  [codebox]" Type <leader>yt to tidy the whole buffer
  :noremap <leader>yt :%!yamltidy -<CR>

  " Visually select lines and type <leader>yt.
  " The first level of indentation spaces will be kept.
  :vnoremap <leader>yt :!yamltidy --partial -<CR>
  [/codebox]

---
title: YAML::Tidy demo
content: |
  [title][/title]
  [codebox animation="1,appear"][include="dirty.yaml.html"][/codebox]

---
title: Questions or Bonus Slides?
content: |
  [size=60][title][/title][/size]

---
title: Bonus slides
content: |
  [title][/title]


---
title: YAML::PP - Include other YAML Files
content: |
  [title][/title]
  [div animation=1,appear][codebox]--- # invoice.yaml
  billing address:  [color=green]!include [/color][color=blue]billing-address.yaml[/color]
  shipping address: !include shipping-address.yaml
  [/codebox][/div][br]
  [div animation=2,appear][codebox]--- # [color=blue]billing-address.yaml[/color]
  street:  Santa Claus Lane North Pole
  zip:     '99705'
  country: Alaska
  [/codebox][/div]

---
title: YAML::PP - Include other YAML Files
content: |
  [title][/title]
  [codebox]use YAML::PP;
  use YAML::PP::Schema::Include;
  [span animation=1,appear]my $include = YAML::PP::Schema::Include->new;[/span]

  [span animation=2,appear]my $yp = YAML::PP->new( [color=#44aacc]schema => ['+', $include ][/color] );[/span]

  [span animation=3,appear]# still needed to make the include object aware
  # of the YAML::PP object
  $include->yp($yp);[/span]
  [/codebox]



---
title: YAML.pm/YAML::XS Implementation
content: |
  [title][/title]
  [list]
  [*]YAML.pm implements the whole process in Perl
  [*]Not many possibilities to customize processing
  [*]YAML::XS implements the whole process in C/XS
  [*]It is using the libyaml event API, but you can not customize processing
  [/list]

---
title: YAML::PP Implementation
content: |
  [title][/title]
  [codebox]               ----- Syntax -----              ----- Schema -----
  [b]Load[/b]:

  YAML Stream       Tokens        Event List        Data Structure
            [color=green][b]-------->    --------->        --------->[/b][/color]
                  lex/parse                   construct
           YAML::PP::Lexer/Parser         YAML::PP::Constructor


  [b]Dump[/b]:

  YAML Stream                   Event List           Data Structure
              [color=green][b]<------------------        <---------------[/b][/color]
                   emit                     represent
           YAML::PP::Emitter             YAML::PP::Representer
  [/codebox]


---
title: YAML::PP::LibYAML Implementation
content: |
  [title][/title]

  [codebox]               ----- Syntax -----              ----- Schema -----
  [b]Load[/b]:

  YAML Stream       Tokens        Event List        Data Structure
            [color=green][b]-------->    --------->        --------->[/b][/color]
                  [color=red]lex/parse[/color]                   construct
         [color=red]YAML::PP::LibYAML::Parser[/color]        YAML::PP::Constructor


  [b]Dump[/b]:

  YAML Stream                   Event List           Data Structure
              [color=green][b]<------------------        <---------------[/b][/color]
                   [color=red]emit[/color]                     represent
       [color=red]YAML::PP::LibYAML::Emitter[/color]        YAML::PP::Representer
  [/codebox]

# ---
# title: Benchmarks
# content: |
#   [title][/title]
#   [codebox]
#   Load:
#   [span animation=1,appear]YAML::PP          [size=20]################################################################# 65ms[/size][/span]
#   [span animation=2,appear]YAML.pm           [size=20]######################################### 41.4ms[/size][/span]
#   [span animation=3,appear]YAML::PP::LibYAML [size=20]########## 10.2ms[/size][/span]
#   [span animation=4,appear]YAML::Tiny        [size=20]####### 7.3ms[/size][/span]
#   [span animation=5,appear]YAML::Syck        [size=20]# 1.25ms[/size][/span]
#   [span animation=6,appear]YAML::XS          [size=20]# 1ms[/size][/span]
#   [/codebox]

---
title: Links
content: |
  [title][/title]
  [list]
  [*][url=http://yaml.org/]YAML.org[/url]
  [*][url=https://www.yaml.info/]A YAML Tutorial and Developer Infos[/url]
  [*][url=https://perlpunk.github.io/yaml-test-schema/schemas.html]1.1/1.2 Schema differences[/url]
  [*][url=https://yaml.org/spec/1.2.2/ext/changes]Specification changelogs[/url]
  [*][url=https://github.com/yaml/yaml-test-suite]YAML Test Suite[/url]
  [*][url=https://matrix.yaml.info/]YAML Test Matrix[/url]
  [*][url=https://github.com/yaml/yaml-runtimes]YAML Runtime images[/url]
  [*][url=https://play.yaml.io/main/parser]Browser playground[/url]
  [*][url=https://github.com/pantoniou/libfyaml]C libfyaml[/url],
  [url=https://github.com/eemeli/yaml]Javascript yaml[/url],
  [url=https://github.com/aaubry/YamlDotNet]YamlDotNet[/url],
  [url=https://github.com/biojppm/rapidyaml]C++ rapidyaml[/url],
  [url=https://github.com/chyh1990/yaml-rust]yaml-rust[/url],
  [url=https://github.com/neslib/Neslib.Yaml]Delphi Neslib.Yaml[/url]
  [*][url=https://github.com/yaml/yaml-grammar/]YAML Grammar[/url]
  [*][url=https://github.com/yaml/yaml-reference-parser]YAML Reference Parsers[/url]
  [*][url=https://metacpan.org/dist/YAML-Parser]YAML::Parser - Reference Parser for Perl[/url]
  [*][url=https://metacpan.org/dist/YAML-PP-Ref]YAML::PP::Ref - load data with reference parser[/url]
  [*][url=https://github.com/perlpunk/yamltidy]YAML::Tidy[/url]
  [*][url=https://metacpan.org/pod/YAML::PP]YAML::PP[/url]
  [*][url=https://metacpan.org/pod/YAML::PP::LibYAML]YAML::PP::LibYAML[/url]

  [*][url=https://perlpunk.github.io/YAML-PP-p5/schema-examples.html]YAML Schema Examples[/url]
  [/list]


---
title: Thanks
content: |
  [size=80][br]Thanks![br]
  [color=green]ðŸ™‚[/color][/size]


